{"version":3,"sources":["resources/styles/PostStyles.ts","resources/styles/SpeedDialStyles.ts","resources/components/Common/AppAvatar.tsx","resources/components/Post/index.tsx","resources/components/Common/PostLoading.tsx","resources/components/Common/AppNoData.tsx","resources/pages/Posts/index.tsx","resources/assets/post.svg"],"names":["PostStyles","useStyles","makeStyles","theme","createStyles","root","maxWidth","padding","margin","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","avatar","backgroundColor","red","skeletonHeight","SpeedDialStyles","flexGrow","speedDial","position","bottom","spacing","right","AppAvatar","img","name","classes","Avatar","aria-label","src","className","split","map","n","charAt","join","getBadgeColor","type","PostComponent","post","history","useHistory","React","useState","anchorEl","setAnchorEl","dispatch","useDispatch","handleClose","Card","CardHeader","process","author","profileImage","firstName","lastName","action","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","onClick","push","RouteURLs","EDIT_POST","replace","slug","_id","toggleConfirmBox","show","title","text","onConfirm","requestPostDelete","Delete","IconButton","event","currentTarget","subheader","moment","createdAt","fromNow","CardMedia","image","featuredImage","CardContent","Typography","variant","color","component","shortDescription","CardActions","disableSpacing","Grid","container","sm","RemoveRedEyeOutlined","shortNumber","totalViews","ThumbUp","totalLikes","CommentOutlined","totalComments","status","note","Tooltip","Chip","size","label","style","textTransform","cursor","PostLoading","Skeleton","animation","width","marginBottom","Fragment","AppNoData","justify","item","md","lg","xs","Box","display","alignItems","justifyContent","p","m","bgcolor","css","boxShadow","borderRadius","nodata","alt","Posts","PostsPerPage","postPerPage","setPostPerPage","currentPage","setCurrentPage","speedDialStyles","postReducer","useSelector","state","onSearchKeyChange","debounce","value","getPosts","searchKey","requestGetPost","limit","useEffect","isLoading","data","totalRecords","renderPagination","TablePagination","labelRowsPerPage","count","page","onChangePage","e","rowsPerPage","rowsPerPageOptions","PostsPerPageOptions","onChangeRowsPerPage","target","TextField","onChange","fullWidth","key","length","index","Post","SpeedDial","ariaLabel","icon","SpeedDialIcon","redirectTo","path","ADD_POST","module","exports"],"mappings":"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","file":"static/js/20.45b9f777.chunk.js","sourcesContent":["import { makeStyles, Theme, createStyles } from \"@material-ui/core\";\nimport { red } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      maxWidth: \"90%\",\n      padding: 15,\n      margin: \"20px auto\",\n    },\n    media: {\n      height: 0,\n      paddingTop: \"56.25%\", // 16:9\n    },\n    expand: {\n      transform: \"rotate(0deg)\",\n      marginLeft: \"auto\",\n      transition: theme.transitions.create(\"transform\", {\n        duration: theme.transitions.duration.shortest,\n      }),\n    },\n    avatar: {\n      backgroundColor: red[500],\n    },\n  })\n);\nconst skeletonHeight = 20;\n\nexport const PostStyles = {\n  useStyles,\n  skeletonHeight,\n};\n","import { makeStyles, Theme, createStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: 380,\n      transform: \"translateZ(0px)\",\n      flexGrow: 1,\n    },\n    speedDial: {\n      position: \"fixed\",\n      bottom: theme.spacing(10),\n      right: theme.spacing(2),\n    },\n  })\n);\n\nexport const SpeedDialStyles = {\n  useStyles,\n};\n","import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nconst AppAvatar = ({ img, name, classes }: any) => (\n  <Avatar aria-label=\"recipe\" src={img} className={classes}>\n    {!img && name\n      ? `${name\n          .split(\" \")\n          .map((n: string) => n.charAt(0))\n          .join(\"\")}`\n      : null}\n  </Avatar>\n);\n\nexport default AppAvatar;\n","import { Chip, Grid, Menu, MenuItem, Tooltip } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  CommentOutlined,\n  Delete,\n  RemoveRedEyeOutlined,\n  ThumbUp,\n} from \"@material-ui/icons\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { requestPostDelete, toggleConfirmBox } from \"../../../redux/actions\";\nimport { RouteURLs } from \"../../../routes/routes\";\nimport { shortNumber } from \"../../../utills/helpers\";\nimport { PostStyles } from \"../../styles\";\nimport AppAvatar from \"../Common/AppAvatar\";\nconst getBadgeColor = (type: string) => {\n  switch (type) {\n    case \"active\":\n      return \"primary\";\n\n    case \"pending\":\n      return \"secondary\";\n\n    default:\n      return \"default\";\n  }\n};\n\nconst PostComponent = ({ post }: any) => {\n  const classes = PostStyles.useStyles();\n  const history = useHistory();\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const dispatch = useDispatch();\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const onDelete = () => {\n    handleClose();\n    dispatch(\n      toggleConfirmBox({\n        show: true,\n        title: \"Are you sure?\",\n        text:\n          \"The post will be deleted and won't be recover later. Do you still want to delete this post?\",\n        onConfirm: () => {\n          dispatch(requestPostDelete(post._id));\n        },\n      })\n    );\n  };\n  const onEdit = () => {\n    history.push(\n      `${RouteURLs.EDIT_POST.replace(\":slug\", post.slug).replace(\n        \":id\",\n        post._id\n      )}`\n    );\n  };\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        avatar={\n          <AppAvatar\n            img={`${process.env.REACT_APP_POST_IMAGE_ENDPOINT}${post.author.profileImage}`}\n            name={`${post.author.firstName} ${post.author.lastName}`}\n            classes={classes.avatar}\n          />\n        }\n        action={\n          <>\n            <Menu\n              id=\"simple-menu\"\n              anchorEl={anchorEl}\n              keepMounted\n              open={Boolean(anchorEl)}\n              onClose={handleClose}\n            >\n              <MenuItem onClick={onEdit}>\n                <EditIcon />\n                &nbsp; Edit\n              </MenuItem>\n              <MenuItem onClick={onDelete}>\n                <Delete />\n                &nbsp;Delete\n              </MenuItem>\n            </Menu>\n            <IconButton aria-label=\"settings\" onClick={handleClick}>\n              <MoreVertIcon />\n            </IconButton>\n          </>\n        }\n        title={post.title}\n        subheader={moment(post.createdAt).fromNow()}\n      />\n      <CardMedia\n        className={classes.media}\n        image={`${process.env.REACT_APP_POST_IMAGE_ENDPOINT}${post.featuredImage}`}\n        title=\"Paella dish\"\n      />\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {post.shortDescription || \"-\"}\n        </Typography>\n      </CardContent>\n      <CardActions disableSpacing>\n        <Grid container>\n          <Grid sm={9}>\n            <IconButton aria-label=\"view\">\n              <RemoveRedEyeOutlined />\n              &nbsp;<small>{shortNumber(post.totalViews || 0, false)}</small>\n            </IconButton>\n            <IconButton aria-label=\"likes\">\n              <ThumbUp />\n              &nbsp;\n              <small>{shortNumber(post.totalLikes || 0, false)}</small>\n            </IconButton>\n            <IconButton aria-label=\"likes\">\n              <CommentOutlined />\n              &nbsp;\n              <small>{shortNumber(post.totalComments || 0, false)}</small>\n            </IconButton>\n          </Grid>\n\n          <Grid sm={3} className={\"float-right\"}>\n            {post.status === \"rejected\" && post.note ? <Tooltip\n              title={post.note}\n            ><IconButton aria-label=\"share\" className={\"pull-right\"}>\n                <Chip\n                  size=\"small\"\n                  label={post.status}\n                  color={getBadgeColor(post.status)}\n                  style={{ textTransform: \"capitalize\", cursor: \"pointer\" }}\n                />\n              </IconButton></Tooltip> : <IconButton aria-label=\"share\" className={\"pull-right\"}>\n                <Chip\n                  size=\"small\"\n                  label={post.status}\n                  color={getBadgeColor(post.status)}\n                  style={{ textTransform: \"capitalize\" }}\n                />\n              </IconButton>}\n          </Grid>\n        </Grid>\n      </CardActions>\n    </Card>\n  );\n};\nexport default PostComponent;\n","import React from \"react\";\nimport { CardHeader, Card, CardContent, CardActions } from \"@material-ui/core\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\n\nimport { PostStyles } from \"../../styles\";\nconst PostLoading = () => {\n  const classes = PostStyles.useStyles();\n  const { skeletonHeight } = PostStyles;\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        avatar={\n          <Skeleton animation=\"wave\" variant=\"circle\" width={40} height={40} />\n        }\n        title={\n          <Skeleton\n            animation=\"wave\"\n            height={skeletonHeight}\n            width=\"80%\"\n            style={{ marginBottom: 6 }}\n          />\n        }\n        subheader={\n          <Skeleton animation=\"wave\" height={skeletonHeight} width=\"40%\" />\n        }\n      />\n      <Skeleton animation=\"wave\" variant=\"rect\" className={classes.media} />\n      <CardContent>\n        <React.Fragment>\n          <Skeleton\n            animation=\"wave\"\n            height={skeletonHeight}\n            style={{ marginBottom: 6 }}\n          />\n          <Skeleton animation=\"wave\" height={20} width=\"80%\" />\n        </React.Fragment>\n      </CardContent>\n      <CardActions disableSpacing>\n        <Skeleton\n          animation=\"wave\"\n          variant=\"rect\"\n          height={skeletonHeight}\n          width=\"80%\"\n        />\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default PostLoading;\n","import React from \"react\";\nimport { Box, Grid } from \"@material-ui/core\";\nimport nodata from \"../../assets/post.svg\";\nconst AppNoData = () => {\n  return (\n    <Grid container justify={\"center\"}>\n      <Grid item sm={6} md={6} lg={6} xs={12}>\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          p={1}\n          m={1}\n          bgcolor=\"background.paper\"\n          css={{\n            height: 250,\n            width: \"100%\",\n            boxShadow: \"0px 0px 0px 3px rgba(225, 225, 225, 0.75)\",\n            borderRadius: \"5px\",\n          }}\n        >\n          <div className=\"no-data\">\n            <div className=\"no-data-icon\">\n              <img src={nodata} alt={\"nodata\"} />\n            </div>\n            <p className=\"no-data-text\">No data are made yet.</p>\n          </div>\n        </Box>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default AppNoData;\n","import React, { useState, useEffect } from \"react\";\nimport { Grid, TablePagination, TextField } from \"@material-ui/core\";\nimport { SpeedDial, SpeedDialIcon } from \"@material-ui/lab\";\nimport { debounce } from \"lodash\";\nimport PostComponent from \"../../components/Post\";\nimport PostLoading from \"../../components/Common/PostLoading\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { redirectTo, requestGetPost } from \"../../../redux/actions\";\nimport { SpeedDialStyles } from \"../../styles\";\nimport { PostsPerPage, PostsPerPageOptions } from \"../../../utills/constants\";\nimport { IRootState } from \"../../../interfaces\";\nimport { RouteURLs } from \"../../../routes/routes\";\nimport AppNoData from \"../../components/Common/AppNoData\";\n\nconst Posts = () => {\n  const [postPerPage, setPostPerPage] = useState(PostsPerPage);\n  const [currentPage, setCurrentPage] = useState(0);\n  const speedDialStyles = SpeedDialStyles.useStyles();\n  const dispatch = useDispatch();\n  const { postReducer } = useSelector((state: IRootState) => ({\n    postReducer: state.postReducer,\n  }));\n  const getSearchResult = (value: string) => {\n    getPosts({\n      searchKey: value,\n    });\n  };\n  const onSearchKeyChange = debounce(getSearchResult, 500);\n  const getPosts = ({ searchKey } = { searchKey: \"\" }) =>\n    dispatch(\n      requestGetPost({\n        currentPage: currentPage + 1,\n        limit: postPerPage,\n        searchKey,\n      })\n    );\n  useEffect(() => {\n    getPosts();\n    // eslint-disable-next-line\n  }, [postPerPage, currentPage]);\n\n  const { isLoading, data, totalRecords } = postReducer;\n  const renderPagination = (\n    <TablePagination\n      labelRowsPerPage={\"Posts per page\"}\n      component=\"div\"\n      count={totalRecords}\n      page={currentPage}\n      onChangePage={(e: any | null, page: number) => setCurrentPage(page)}\n      rowsPerPage={postPerPage}\n      rowsPerPageOptions={PostsPerPageOptions}\n      onChangeRowsPerPage={(e: any) => {\n        setCurrentPage(0);\n        setPostPerPage(e.target.value);\n      }}\n    />\n  );\n  \n  return (\n    <>\n      <Grid container>\n        <Grid item sm={6} md={6} lg={6} xs={12}>\n          <Grid container>\n            <Grid item sm={6} md={6}>\n              <TextField\n                variant=\"outlined\"\n                onChange={(e: any) => onSearchKeyChange(e.target.value)}\n                fullWidth\n                label=\"Search post...\"\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item sm={6} lg={6} md={6} xs={12}>\n          {renderPagination}\n        </Grid>\n      </Grid>\n\n      <Grid container>\n        {isLoading ? (\n          [1, 2, 3].map((key: number) => (\n            <Grid key={key} item sm={12} md={6} lg={4} xs={12}>\n              <PostLoading />\n            </Grid>\n          ))\n        ) : (\n          <>\n            {!data.length ? (\n              <AppNoData />\n            ) : (\n              data.map((post, index) => (\n                <Grid item sm={12} md={6} lg={4} xs={12} key={index}>\n                  <PostComponent post={post} />\n                </Grid>\n              ))\n            )}\n          </>\n        )}\n      </Grid>\n      <SpeedDial\n        ariaLabel=\"SpeedDial openIcon example\"\n        className={speedDialStyles.speedDial}\n        icon={<SpeedDialIcon />}\n        onClick={() =>\n          dispatch(\n            redirectTo({\n              path: RouteURLs.ADD_POST,\n            })\n          )\n        }\n        open={false}\n      />\n      {renderPagination}\n    </>\n  );\n};\n\nexport default Posts;\n","module.exports = __webpack_public_path__ + \"static/media/post.3608c54f.svg\";"],"sourceRoot":""}