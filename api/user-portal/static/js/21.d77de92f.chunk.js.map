{"version":3,"sources":["resources/components/Common/TransactionLoader.tsx","resources/pages/Transactions/index.tsx","resources/assets/transaction.svg"],"names":["TransactionLoader","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","key","width","Skeleton","animation","height","align","component","useStyles","makeStyles","table","minWidth","Transactions","useState","EarningsPerPage","transactionsPerPage","setTransactionsPerPage","currentPage","setCurrentPage","dispatch","useDispatch","payoutReducer","useSelector","state","useEffect","requestPayoutsList","limit","isLoading","data","totalRecords","renderPagination","TablePagination","labelRowsPerPage","count","page","onChangePage","e","rowsPerPage","rowsPerPageOptions","EarningsPerPageOptions","onChangeRowsPerPage","target","value","classes","Grid","container","TableContainer","Paper","className","length","item","_id","scope","transactionId","amount","shortNumber","IconButton","Chip","size","label","payoutStatus","color","style","textTransform","colSpan","src","transaction","alt","module","exports"],"mappings":"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","file":"static/js/21.d77de92f.chunk.js","sourcesContent":["import React from 'react';\nimport { TableBody, TableCell, TableRow, TableHead, Table } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\"\n\nconst TransactionLoader = () => {\n    return (\n        <Table aria-label=\"simple table\">\n            <TableHead>\n                <TableRow>\n                    <TableCell>#</TableCell>\n                    <TableCell>Payout Id</TableCell>\n                    <TableCell>Amount&nbsp;(&#8377;)</TableCell>\n                    <TableCell>Status</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {[1, 2, 3, 4].map((key: number) => (<TableRow key={key}>\n                    <TableCell width={100}><Skeleton animation=\"wave\" height={20} width=\"40%\" /></TableCell>\n                    <TableCell align=\"right\" width={500} component=\"th\" ><Skeleton animation=\"wave\" height={20} width=\"1000\" /></TableCell>\n                    <TableCell width={100}><Skeleton animation=\"wave\" height={20} width=\"40%\" /></TableCell>\n                    <TableCell width={100}><Skeleton animation=\"wave\" height={20} width=\"80%\" /></TableCell>\n                </TableRow>))}\n            </TableBody></Table>\n    )\n}\n\nexport default TransactionLoader;\n","import React, { useState, useEffect, FC } from \"react\";\nimport {\n  Grid,\n  TablePagination,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  makeStyles,\n  TableBody,\n  IconButton,\n  Chip,\n} from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { requestPayoutsList } from \"../../../redux/actions\";\nimport {\n  EarningsPerPage,\n  EarningsPerPageOptions,\n} from \"../../../utills/constants\";\nimport { IRootState, IPayoutRecords } from \"../../../interfaces\";\nimport { shortNumber } from \"../../../utills/helpers\";\nimport TransactionLoader from \"../../components/Common/TransactionLoader\";\nimport transaction from \"../../assets/transaction.svg\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nconst Transactions: FC = () => {\n  const [transactionsPerPage, setTransactionsPerPage] = useState(\n    EarningsPerPage\n  );\n  const [currentPage, setCurrentPage] = useState(0);\n  const dispatch = useDispatch();\n  const { payoutReducer } = useSelector((state: IRootState) => ({\n    payoutReducer: state.payoutReducer,\n  }));\n  useEffect(() => {\n    dispatch(\n      requestPayoutsList({\n        currentPage: currentPage + 1,\n        limit: transactionsPerPage,\n      })\n    );\n    // eslint-disable-next-line\n  }, [transactionsPerPage, currentPage]);\n\n  const { isLoading, data, totalRecords } = payoutReducer || {};\n  const renderPagination = (\n    <TablePagination\n      labelRowsPerPage={\"Records per page\"}\n      component=\"div\"\n      count={totalRecords}\n      page={currentPage}\n      onChangePage={(e: any | null, page: number) => setCurrentPage(page)}\n      rowsPerPage={transactionsPerPage}\n      rowsPerPageOptions={EarningsPerPageOptions}\n      onChangeRowsPerPage={(e: any) => {\n        setCurrentPage(0);\n        setTransactionsPerPage(e.target.value);\n      }}\n    />\n  );\n  const classes = useStyles();\n  let count = currentPage * transactionsPerPage + 1;\n\n  return (\n    <>\n      <Grid container>\n        <TableContainer component={Paper}>\n          {isLoading ? (\n            <TransactionLoader />\n          ) : (\n            <Table className={classes.table} aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>#</TableCell>\n                  <TableCell>Payout Id</TableCell>\n                  <TableCell align=\"center\">Amount&nbsp;(&#8377;)</TableCell>\n                  <TableCell align=\"right\">Status</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data && data.length ? (\n                  data.map((item: IPayoutRecords) => (\n                    <TableRow key={item._id}>\n                      <TableCell>{count++}</TableCell>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {item.transactionId}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        {item.amount ? shortNumber(item.amount) : 0}\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <IconButton aria-label=\"share\" className={\"pull-right\"}>\n                          <Chip\n                            size=\"small\"\n                            label={item.payoutStatus}\n                            color={\n                              item.payoutStatus === \"paid\"\n                                ? \"primary\"\n                                : \"secondary\"\n                            }\n                            style={{ textTransform: \"capitalize\" }}\n                          />\n                        </IconButton>\n                        {/* <Button variant=\"contained\" size={\"small\"} color={item.status === \"paid\" ? \"primary\" : \"secondary\"}>\n                                            {item.status}\n                                        </Button> */}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={4} align=\"center\">\n                      <div className=\"no-data\">\n                        <div className=\"no-data-icon\">\n                          <img src={transaction} alt={\"transaction\"} />\n                        </div>\n                        <p className=\"no-data-text\">\n                          No payout history to show.\n                        </p>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </TableContainer>\n      </Grid>\n      {renderPagination}\n    </>\n  );\n};\n\nexport default Transactions;\n","module.exports = __webpack_public_path__ + \"static/media/transaction.b0f07da4.svg\";"],"sourceRoot":""}